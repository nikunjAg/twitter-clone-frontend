.Post {
	width: 100%;
	cursor: pointer;
	color: var(--twitter-text-color);
	display: flex;
	flex-direction: row;
	justify-content: flex-start;
	padding: 5px;
	border: 1px solid var(--twitter-theme-border-color);
	border-top: none;
	transition: background-color 0.2s ease-out;
	background-color: var(--twitter-theme-color);
}

.Post:hover {
	background-color: var(--twitter-theme-light-background-color);
}

/* Means when this post is used as a parent post
	to show the reply it has received
*/
.Post.HasReply,
.Post.IsReply {
	padding: 0;
}

.Post:not(.HasReply),
.Post:not(.IsReply) {
	align-items: normal;
}

.Post .AddOn {
	font-size: 1.25rem;
	color: var(--twitter-light-text-color);
	padding-bottom: 5px;
}

.Post p.AddOn {
	padding-left: 8px;
	font-size: 0.8rem;
	font-weight: 600;
	line-height: 100%;
}

/* > (Immediate child arrows) because we have modal Posts inside of post, so with these arrows styles of parent depending on props do not misbehave with child post styles */
.Post.HasReply > .PostLeft > .AddOn,
.Post.IsReply > .PostLeft > .AddOn,
.Post.HasReply > .PostContent > .AddOn,
.Post.IsReply > .PostContent > .AddOn {
	display: none;
}

.Post.HasReply > .PostLeft > .AddOn.PinnedTweet,
.Post.IsReply > .PostLeft > .AddOn.PinnedTweet,
.Post.HasReply > .PostContent > .AddOn.PinnedTweet,
.Post.IsReply > .PostContent > .AddOn.PinnedTweet {
	display: block;
}

.PostLeft {
	padding: 8px 0px 0px 10px;
	display: flex;
	flex-direction: column;
	justify-content: flex-start;
	align-items: center;
}

.PostLeft a {
	padding: 4px 0px;
}

.Post.HasReply > .PostLeft,
.Post.IsReply > .PostLeft {
	padding-left: 0;
}

.Post.IsReply > .PostLeft {
	/* Instead of padding top we can have a 8px height TopReplyThread */
	padding-top: 0px;
}

.TopReplyThread {
	height: 8px;
	border-right: 2px solid var(--twitter-theme-thread-color);
	display: none;
}

.BottomReplyThread {
	flex: 1;
	border-right: 2px solid var(--twitter-theme-thread-color);
	display: none;
}

.Post.HasReply > .PostLeft > .BottomReplyThread,
.Post.IsReply > .PostLeft > .TopReplyThread {
	display: block;
}

.PostContent {
	padding-top: 8px;
	flex: 1;
	display: flex;
	flex-direction: column;
	justify-content: flex-start;
	align-items: flex-start;
}

.PostContent .AddOn a {
	text-decoration: none;
	color: var(--twitter-light-text-color);
}

.PostContent .AddOn a:hover {
	text-decoration: underline;
}

.UserDetails {
	padding-left: 8px;
	width: 100%;
	display: flex;
	flex-direction: row;
	align-items: center;
	justify-content: flex-start;
	font-size: 0.9rem;
}

.UserNameLinkRow {
	font-weight: 700;
	margin-right: 2px;
	font-size: 0.85rem;
	display: flex;
	flex-direction: row;
	align-items: center;
	justify-content: flex-start;
	text-decoration: none;
	color: var(--twitter-text-color);
}

.DisplayName {
	border-bottom: 1px solid transparent;
	transition: border-color 0.2s ease-out;
}

.UserNameLinkRow:hover .DisplayName {
	border-color: var(--twitter-text-color);
}

.UserDetails .Verified {
	color: var(--twitter-color);
	font-size: 0.9rem;
	margin: 0px 6px 0px 2px;
}

.UserName {
	color: var(--twitter-light-text-color);
	font-size: 0.86rem;
}

.Seperator {
	color: var(--twitter-light-text-color);
	padding: 0 5px;
}

.PostedOn {
	color: var(--twitter-light-text-color);
	font-size: 0.86rem;
}

.UserDetails .MoreIcon {
	margin-left: auto;
}

.ReplyTo a {
	color: var(--twitter-color);
	text-decoration: none;
	font-size: 0.8rem;
	padding-left: 8px;
}

.ReplyTo a:hover {
	text-decoration: underline;
}

.PostData {
	padding: 2px 10px 0px 0px;
	width: 100%;
}

.Content {
	/* color: var(--twitter-text-color); */
	color: #000;
	font-size: 0.87rem;
	font-weight: 400;
	padding-left: 8px;
}

.Content > div,
.Content > div span {
	font-size: 0.9rem !important;
	display: flex;
	flex-direction: row;
	align-items: center;
	justify-content: flex-start;
	line-height: 140%;
}

.PostData > div:not(.Content) {
	margin-top: 10px;
	margin-bottom: 0px;
}

.PostImages {
	width: 100%;
	height: 180px;
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	margin-top: 0.6rem;
}

.PostImageDiv {
	position: relative;
	border-radius: 4px;
	padding: 1px;
	overflow: hidden;
}

.PostImageDiv::after {
	border-radius: 4px;
	position: absolute;
	content: '';
	/* Because of padding */
	top: 1px;
	left: 1px;
	width: calc(100% - 1px - 1px);
	height: calc(100% - 1px - 1px);
	background-color: rgba(0, 0, 0, 0.13);
}

.PostImageDiv > img {
	width: 100%;
	height: 100%;
	object-fit: scale-down;
}
